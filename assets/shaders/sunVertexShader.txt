#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;

out vec3 diffuseLight;
out vec2 sunTexture;
out vec3 specular;

vec4 LightPosition = vec4 (0.0, 0.0, 0.0, 1.0); // Light position in world coords.
vec3 Ld = vec3 (1.0f, 1.0f, 1.0f); // Light source intensity
vec3 specularLight = vec3(0.5f, 0.5f, 0.5f);

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform vec3 camera;

void main(){

  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);

  // Convert normal and position to eye coords
  // Normal in view space

  vec3 tnorm = normalize( NormalMatrix * vertex_normal);

  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);

  //normalised vector towards the light source
  vec3 s = normalize(vec3(LightPosition - eyeCoords));
  
  // Diffuse
  diffuseLight = Ld * max( dot( s, tnorm ), 0.0 );
  
  //Specular 
  vec3 viewDir = normalize(camera - (vec3(model * vec4(vertex_position,1.0))));
  vec3 reflectDirection = reflect(-s, tnorm);
  float spec = pow(max(dot(viewDir, reflectDirection), 0.0), 32);
  specular = specularLight * spec;

  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * vec4(vertex_position,1.0);;
  sunTexture = vertex_texture;
}